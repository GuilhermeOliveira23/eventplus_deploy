# Backend - API EventPlus (Instruções para rodar localmente)

Este README descreve como clonar, configurar e executar esta API localmente. Opção C (editar appsettings.json localmente) explicada passo a passo.

⚠️ Segurança: nunca comite credenciais (senhas) no repositório. Use `appsettings.json.template`, `dotnet user-secrets` ou variáveis de ambiente.

## Pré-requisitos
- .NET 8 SDK
- SQL Server local (LocalDB, SQLEXPRESS) ou acesso a uma instância remota
- (Opcional) Visual Studio 2022 ou terminal (PowerShell / bash)
- (Opcional) sqlcmd ou SSMS para testar conexão

## 1) Clonar o repositório
No terminal:

```
git clone https://github.com/GuilhermeOliveira23/eventplus_deploy
cd <pasta-do-projeto-que-contem-o-.csproj>
```

## 2) Opção C — editar localmente (mais simples)
1. Abra `appsettings.json` no diretório do projeto.
2. Substitua apenas a connection string `ConnectionStrings:EventPlus` pela sua connection string local. Exemplos:

- SQL Express (SQL Auth):

```json
{
  "ConnectionStrings": {
    "EventPlus": "Server=DESKTOP-EXEMPLO\\SQLEXPRESS;Database=eventplus_tarde;User Id=sa;Password=SuaSenhaAqui;TrustServerCertificate=True;Connect Timeout=60;"
  }
}
```

- LocalDB (Trusted Connection):

```json
{
  "ConnectionStrings": {
    "EventPlus": "Server=(localdb)\\MSSQLLocalDB;Database=eventplus_tarde;Trusted_Connection=True;Connect Timeout=30;"
  }
}
```

Observações:
- Use `\\` para escapar a barra invertida no JSON ao apontar para instância nomeada.
- `TrustServerCertificate=True` apenas em dev se houver problema com TLS.
- Não commite `appsettings.json` com senha.

## 3) Aplicar migrations / preparar banco
Se o projeto possui migrations:

```
dotnet tool install --global dotnet-ef
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet ef database update
```

Para criar uma migration nova:

```
dotnet ef migrations add InitialCreate
dotnet ef database update
```

Execute os comandos no diretório que contém o `.csproj` com o `EventContext`.

## 4) Rodar a API
- Via Visual Studio: selecione perfil (https ou IIS Express) e pressione F5 ou Ctrl+F5.
- Via CLI:

```
dotnet restore
dotnet build
dotnet run --launch-profile "https"
```

Abra o Swagger: https://localhost:7209/swagger (ajuste a porta conforme `Properties/launchSettings.json` ou a saída do `dotnet run`).

## 5) Testar endpoints e autenticação
- Login (obter JWT): POST `/api/Login` com body JSON `{ "email": "seu@email", "senha": "suaSenha" }`.
- Utilize o token nas requisições protegidas: header `Authorization: Bearer <token>`.

## 6) Troubleshooting rápido
- Se erro de timeout pós-login (Azure serverless): aumente `Connect Timeout`, habilite retry no EF ou verifique se o banco está pausado.
- Se erro 40 (Named Pipes): habilite TCP/IP em SQL Server Configuration Manager, inicie SQL Server Browser ou fixe porta TCP.
- Testes úteis:
  - `Test-NetConnection -ComputerName <host> -Port 1433`
  - `sqlcmd -S "tcp:<host>,1433" -U <user> -P "<password>" -d <db>`

## 7) Boas práticas
- Commit: mantenha `appsettings.json.template` sem segredos e adicione `appsettings.json` ao `.gitignore` se preferir.
- Para desenvolvimento seguro prefira `dotnet user-secrets` ou variáveis de ambiente (key: `ConnectionStrings__EventPlus`).
- Se uma senha vazou, troque-a no SQL Server e remova do histórico Git.

## Arquivo de exemplo para commitar (`appsettings.json.template`)

```json
{
  "ConnectionStrings": {
    "EventPlus": "Server=SEU_SERVER;Database=SEU_DB;User Id=SEU_USER;Password=<<SUA_SENHA_AQUI>>;TrustServerCertificate=True;Connect Timeout=60;"
  },
  "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Warning" } },
  "AllowedHosts": "*"
}
```

---

Se desejar, eu posso criar `appsettings.json.template` e adicionar `appsettings.json` ao `.gitignore` no workspace agora.  
